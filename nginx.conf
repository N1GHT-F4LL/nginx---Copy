user www-data www-data; # Run as a unique, least privilege user and group to run Nginx

worker_processes auto; # Automatically determine the number of worker processes based on available CPU cores, or set to a number, e.g., 4

worker_rlimit_nofile 65535; # Set limit on the number of open files for worker processes, limit by the system, in nginx:1.27.0 docker image, the limit is 1048576

events
{
    worker_connections 65535; # Default is 512, to handle more connections

    multi_accept on; # Accept multiple connections with one system call

    use epoll; # Use epoll for better performance on Linux
}

http
{
    # Basic settings
    sendfile on; # Enable sendfile for better performance
    tcp_nopush on; # Buffer responses before sending them
    tcp_nodelay on; # Disable buffering of responses
    log_not_found off; # Don't log missing files

    client_max_body_size 16M; # Maximum allowed size of the client request body, specified in the “Content-Length” request header field
    types_hash_max_size 2048; # Default is 1024
    server_tokens off; # Hide Nginx version in error pages, for security reasons

    # Logging
    access_log /var/log/nginx/access.log; # Log all requests to access.log
    error_log /var/log/nginx/error.log; # Log errors to error.log

    # Gzip settings
    gzip on; # Enable Gzip compression
    gzip_disable "msie6"; # Disable Gzip for old MSIE versions
    gzip_vary on; # Vary on Accept-Encoding header
    gzip_proxied any; # Enable Gzip for all proxies
    gzip_comp_level 6; # Compression level (1-9), 5 is perfect balance between speed and compression, but 6 is recommended for high-traffic sites
    gzip_buffers 16 8k; # Buffer size
    gzip_http_version 1.1; # Enable Gzip from HTTP/1.1, 1.0 is not allowed
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # Compress the specified MIME types

    # Open file cache - cache file descriptors for frequently accessed files, but becareful with this setting, as it can cause sensitive data to be cached
    open_file_cache max=10000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Timeouts - default is 60
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    keepalive_timeout 65; # Default is 75, but 65 is recommended for high-traffic sites

    # Verify chain of trust of OCSP response using Root CA and Intermediate certs, recommended for performance
    # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;
    # ssl_stapling on; # Enable OCSP stapling
    # ssl_stapling_verify on; # Verify the OCSP response
    # resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s; # Cloudflare, Google Public DNS, OpenDNS
    # resolver_timeout 2s;

    # Security headers - prevent common attacks
    add_header X-Content-Type-Options nosniff; # Prevent MIME-sniffing
    add_header X-Frame-Options DENY; # Prevent Clickjacking
    add_header X-XSS-Protection "1; mode=block"; # Prevent XSS attacks
    ## Content-Security-Policy (CSP)
    ## No 'script-src' directive, you need to test it yourself
    add_header Content-Security-Policy "object-src 'none'; base-uri 'none'; require-trusted-types-for 'script'; frame-ancestors 'self';";
    ## The safest CSP, only block your website to be inside an inframe
    add_header Content-Security-Policy "frame-ancestors 'self';";
    ## Strict Transport Security (HSTS)
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; always;";

    # Load configs
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    include /etc/nginx/sites-enabled/*;
}